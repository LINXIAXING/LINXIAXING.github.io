[{"title":"ERROR ：gathering device information while adding custom device dev nvidia-uvm“ no such file or dir","url":"/2023/06/12/ERROR%20%EF%BC%9Agathering%20device%20information%20while%20adding%20custom%20device%20dev%20nvidia-uvm%E2%80%9C%20no%20such%20file%20or%20dir/","content":"“/dev/nvidia-uvm“: no such file or dir 问题解决问题描述\n在搭建使用Docker容器搭建PyTorch容器进行深度学习模型训练时，启动容器报错。\n错误信息如下：\n\n\n在查询相关文档后，尝试以下步骤手动解决：\n解决方案首先确保宿主机已安装nvidia驱动。执行以下命令：\nnvidia-smi\n\n确保显卡没问题，尝试手动加载：\ncd /devnvidia-modprobe -u -c=0ls | grep nvidia\n\nDONE! 问题解决，重启容器即可\n","categories":["ISSUE"],"tags":["Docker","Nvidia"]},{"title":"Docker+FastApi微服务搭建","url":"/2023/06/07/micro-services-based-on-Docker-Nginx-FastApi/","content":"Docker容器下基于Nginx + FastAPI的后端搭建\n本教程仅包含\n\n前言基本思路Docker容器下通过Python fastapi库完成后台开发，Nginx对不同docker下的服务做端口映射，实现微服务开发。不同的镜像负责不同的功能模块，优点是低耦合高延展，且便于迁移（编写脚本实现一键打包与部署，此博客中暂时不做赘述）。\n环境Ubuntu 20.04\nDocker环境搭建\n如果您已准备好容器，请忽略此步\n\n镜像创建与启用准备好镜像后，执行命令启动：\ndocker run -itd --gpus all -e NVIDIA_VISIBLE_DEVICES=all \\-m 128g --cpus=32 --shm-size 64G --name pytorch-container -p 5333:22 \\--ip 172.20.0.1 &lt;image name&gt;:&lt;tag&gt;\n\n–ip 后配置的是容器启动后的IP地址。\n如果忘记可以执行以下命令查看全部容器的地址，或是在容器内部执行ifconfig查看网卡信息：\ndocker inspect -f '{{.Name}} - {{.NetworkSettings.IPAddress }}' $(docker ps -aq)\n\n如果是docker-compose，请使用命令：\ndocker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)\n\n完成后请在Xftp和Xshell中链接容器，方便后续操作。\n基于FastApi的后台开发\nFastApi是一个基于Python的高速web框架\n关于更多建议查询官方API，推荐Python版本3.6+\n\n这里我已经写好一份简单的项目。他包含两个接口，通过深度学习模型实现 文字➡语音 和 语音➡文字功能。\n如果要使用，那么你需要拥有基本的CUDA+Pytorch环境，或者你也可以仅做参考。\n详情请访问我的Github仓库。\nNginx端口转发在安装之前，你需要先确保你有安装先决条件\n对于Ubuntu：\napt-get install gccapt-get install libpcre3 libpcre3-devapt-get install zlib1g zlib1g-devapt-get install openssl openssl-dev\n\n对于CentOS：\nyum -y install gcc-c++ yum -y install pcre pcre-develyum -y install zlib zlib-develyum -y install openssl openssl-devel  \n\n\n\nNginx安装访问nginx下载，并将下载好的包上传服务器。或者你可以在服务器上运行以下命令：\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\n\n解压安装包：\ntar -zxvf nginx-1.24.0.tar.gz\n\n\n\n配置转发规则server{  listen 8001;  server_name 127.0.0.1;  location / {    proxy_pass  http://172.20.0.1:8002;    proxy_set_header Host $proxy_host;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  }}\n\n访问本机8001端口时，将转发到172.20.0.1容器的8002端口\n","categories":["TECHNOLOGY"],"tags":["Docker","Nginx","FastAPI"]},{"title":"百度飞桨-PaddleOCR模型微调","url":"/2023/06/05/%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%A1%A8-PaddleOCR%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/","content":"PaddleOCR模型微调前言博客将从环境配置到微调记录完整的流程。\n\n最难的步骤是配环境，环境配不好基本就寄了\n\n\n\n环境准备Docker环境本次是基于Docker的开发环境，请同学帮忙准备了Paddle镜像。您可以在这里下载需要的相关镜像，或是直接将镜像pull到您的服务器中。\n我的环境配置：\npaddle 2.4.2\ngpu-cuda 11.7\ncudnn 8.4\ntrt 8.4\n准备好镜像后执行命令检查你当前的镜像：\nDocker ps -a\n\n启动镜像：\ndocker run -itd \\-p 5444:22 --name &lt;container name&gt; \\--gpus all -e NVIDIA_VISIBLE_DEVICES=all \\-m 128g --cpus=32 --shm-size=64g \\--restart=always \\--device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm \\--device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidia1:/dev/nvidia1 --device /dev/nvidia2:/dev/nvidia2 --device /dev/nvidia3:/dev/nvidia3 \\-v /datasets/dataset:/dataset:ro \\&lt;image name&gt;:&lt;tag&gt;\n\nPython库配置模型微调模型测试替换权重识别测试img_path = './test.jpg'ocr = PaddleOCR(use_angle_cls=True, use_gpu=False,lang=\"ch\")  # need to run only once to download and load model into memoryresult = ocr.ocr(img_path, det=True, cls=False, rec=True)# 预测结果包含识别BOX的位置信息，文字以及置信度# [[[x, y]]*4, (word, confidence)]for line in result[0]:\tprint(line)image = Image.open(img_path).convert('RGB')boxes = [line[0] for line in result[0]]txts = [line[1][0] for line in result[0]]scores = [line[1][1] for line in result[0]]im_show = draw_ocr(image, boxes, txts, scores)im_show = Image.fromarray(im_show)im_show.save('./result.jpg')\n\n这是一份基础的测试代码，后续将更新更完整的Acc测试脚本\n","categories":["TECHNOLOGY"],"tags":["Deep Learning","OCR","Paddle"]},{"title":"*【活动预告】: 全新界面【个人介绍】开启，路由限时开放！","url":"/2099/06/23/%E3%80%90%E6%B4%BB%E5%8A%A8%E9%A2%84%E5%91%8A%E3%80%91-%E5%85%A8%E6%96%B0%E7%95%8C%E9%9D%A2%E3%80%90%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D%E3%80%91%E5%BC%80%E5%90%AF%EF%BC%8C%E8%B7%AF%E7%94%B1%E9%99%90%E6%97%B6%E5%BC%80%E6%94%BE%EF%BC%81/","content":"\n\n\n\n\n\n关于我\n一位刚开始学习炼丹的年轻炼丹师\n\n梦想是成为精通 ▒▒▒▒ 的 ▒▒▒▒▒，当然这条路还很远。\n！\n"},{"title":"Docker基础命令","url":"/2023/06/03/Docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/","content":"\n\n\n\n基础命令docker versiondocker infodocker search &lt;镜像名&gt; #查找镜像docker search --filter=STARS=9000 mysql  #搜索 STARS=9000的 mysql 镜像\n\n\n\nImage# 查看全部docker镜像docker images# 拉取tag版本镜像   https://hub.docker.com/search?type=image&amp;q=docker pull &lt;镜像名&gt;:&lt;tag&gt;  # 删除镜像 (后接多个可批量删除,空格隔开docker rmi -f &lt;镜像名/镜像ID&gt;# 保存镜像docker save -o &lt;镜像文件.tar&gt; &lt;镜像名&gt;:&lt;tag&gt;# 加载镜像docker load -i &lt;镜像地址&gt;# 查看镜像详细信息docker inspect &lt;镜像ID&gt;  \n\n\n\nContainer# 查看全部镜像docker ps -a# 基于镜像创建容器docker run &lt;相关参数&gt; &lt;镜像 ID&gt; &lt;初始命令&gt;docker run -i -t -v /root/software/:/mnt/software/ 9f38484d220f /bin/bash#\t-i：表示以“交互模式”运行容器#\t-t：表示容器启动后会进入其命令行#\t-v：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;# 存为镜像docker commit -a \"tropical_algae\" -m \"test\" &lt;container id&gt; &lt;image name&gt;:&lt;tag&gt;#\t-a 提交人的姓名#\t-m 提交内容  现有容器ID#容器重命名docker rename &lt;old&gt; &lt;new&gt;  #启动容器docker start &lt;容器ID&gt;#停止容器docker stop &lt;容器ID&gt;# 删除容器docker rm &lt;容器id&gt;  # 运行容器docker exec -ti --user root &lt;container id&gt; /bin/bash\n\n\n\n我的常用# 深度学习镜像启动docker run -itd \\-p 5444:22 --name &lt;container name&gt; \\--gpus all -e NVIDIA_VISIBLE_DEVICES=all \\-m 128g --cpus=32 --shm-size=64g \\--restart=always \\--device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm \\--device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidia1:/dev/nvidia1 --device /dev/nvidia2:/dev/nvidia2 --device /dev/nvidia3:/dev/nvidia3 \\-v /datasets/dataset:/dataset:ro \\&lt;image name&gt;:&lt;tag&gt;# 删除全部镜像  -a 意思为显示全部, -q 意思为只显示IDdocker rmi -f $(docker images -aq)# 启动全部容器docker start $(docker ps -a | awk '{ print $1}' | tail -n +2)  \n\n","categories":["DOCUMENT"],"tags":["Docker","Study"]},{"title":"Nginx安装","url":"/2023/06/14/Nginx%E5%AE%89%E8%A3%85/","content":"Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，也可以作为反向代理进行负载均衡的实现。\n\n\n在安装之前，你需要先确保你有安装先决条件\n对于Ubuntu：\napt-get install gccapt-get install libpcre3 libpcre3-devapt-get install zlib1g zlib1g-devapt-get install openssl openssl-dev\n\n对于CentOS：\nyum -y install gcc-c++ yum -y install pcre pcre-develyum -y install zlib zlib-develyum -y install openssl openssl-devel  \n\n\n\nLinux下安装访问nginx下载，并将下载好的包上传服务器。或者你可以在服务器上运行以下命令：\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\n\n解压安装包：\ntar -zxvf nginx-1.24.0.tar.gz\n\n进入目录，编译安装：\ncd ./nginx-1.24.0./configuremakemake install\n\n\n走到这步若遇到错误：make: *** No rule to make target build', needed by default’. Stop.\n请检查前面的环境是否已安装。环境配好后重新编译安装\n\n启动Nginx：\nsudo /usr/local/nginx/sbin/nginx\n\n\n\nDocker下安装拉取最新nginx版本：\ndocker pull nginx:latest\n\n运行Docker：\ndocker run -p 9002:80 --name nginx -d nginx:latest\n\n","categories":["INSTALL"],"tags":["Nginx"]},{"title":"Docker安装","url":"/2023/05/09/Docker%E5%AE%89%E8%A3%85/","content":"Docker是一种轻量级的虚拟化技术，同时是一个开源的应用容器运行环境搭建平台，可以让开发者以便捷方式打包应用到一个可移植的容器中，然后安装至任何运行Linux或Windows等系统的服务器上。相较于传统虚拟机，Docker容器提供轻量化的虚拟化方式、安装便捷、启停速度快。\n\n\n安装之前，先卸载已安装的Docker：\nsudo apt-get remove docker docker-engine docker.io\n\nApt-get 安装sudo apt-get updatesudo apt-get install \\\tapt-transport-https \\    ca-certificates \\    curl \\    gnupg \\    lsb-release\n\n为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥：\ncurl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | \\\tsudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg# 官方源# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\#\tsudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n向 sources.list 中添加 Docker 软件源：\necho \\\t\"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \\  \thttps://mirrors.aliyun.com/docker-ce/linux/ubuntu \\\t(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; \\\t/dev/null# 官方源# echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \\ #\thttps://download.docker.com/linux/ubuntu \\#\t(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; \\ #\t/dev/null\n\n安装：\nsudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io\n\n\n\n脚本安装curl -fsSL get.docker.com -o get-docker.shsudo sh get-docker.sh --mirror Aliyun\n\n\n\n启动Dockersudo systemctl enable dockersudo systemctl start docker\n\n","categories":["INSTALL"],"tags":["Docker"]}]